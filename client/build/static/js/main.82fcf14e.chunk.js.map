{"version":3,"sources":["views/Main.jsx","components/PetForm.jsx","views/New.jsx","views/Show.jsx","views/Edit.jsx","App.js","serviceWorker.js","index.js"],"names":["Main","props","useState","pet","setPet","useEffect","Axios","get","then","res","data","results","catch","err","console","log","className","map","p","i","key","petName","petType","petDesc","to","_id","PetForm","inputs","handleInput","handleSubmit","errors","submitValue","onSubmit","htmlFor","type","value","onChange","name","message","skillOne","skillTwo","skillThree","New","initialPet","initialErrors","setErrors","e","target","preventDefault","post","navigate","Show","id","onClick","delete","Edit","edit","setEdit","put","response","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.82fcf14e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Axios from 'axios';\r\nimport { Link } from '@reach/router'\r\n\r\nconst Main = props => {\r\n    const [pet, setPet] = useState([]);\r\n\r\n    useEffect(() => {\r\n        Axios.get('http://localhost:8000/api/pet')\r\n            .then(res => setPet(res.data.results))\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <table className=\"table table-success col-8 mx-auto\">\r\n                <thead>\r\n                    <th></th>\r\n                    <th>Pet Name</th>\r\n                    <th>Pet Type</th>\r\n                    <th>pet Description</th>\r\n                    <th>Action</th>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        pet.map((p, i) => {\r\n                            return <tr key={i}>\r\n                                \r\n                                <td>{i + 1}</td>\r\n                                <td>{p.petName}</td>\r\n                                <td>{p.petType}</td>\r\n                                <td>{p.petDesc}</td>\r\n                                <td><Link to={`/edit/${p._id}`} className=\"btn btn-warning\">Edit Pet {i + 1}</Link><Link className=\"btn btn-success\" to={`/pet/${p._id}`}>Show Pet {i + 1}</Link></td>\r\n                                \r\n                            </tr>\r\n                        })\r\n                    }\r\n                </tbody>\r\n\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nconst PetForm = props => {\r\n    const {inputs,handleInput,handleSubmit,errors,submitValue} = props;\r\n    return(\r\n        <form className=\"col-5 mx-auto\"onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"petName\">Pet Name:</label>\r\n                <input className=\"form-control\" type=\"text\" value={inputs.petName} onChange={handleInput} name=\"petName\"/>\r\n                <span className=\"text-danger\">{errors.petName ? errors.petName.message : \"\"}</span>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"petType\">Pet Type:</label>\r\n                <input className=\"form-control\" type=\"text\" value={inputs.petType} onChange={handleInput} name=\"petType\"/>\r\n                <span className=\"text-danger\">{errors.petType ? errors.petType.message : \"\"}</span>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"petDesc\">Pet Description:</label>\r\n                <input className=\"form-control\" type=\"text\" value={inputs.petDesc} onChange={handleInput} name=\"petDesc\"/>\r\n                <span className=\"text-danger\">{errors.petDesc ? errors.petDesc.message : \"\"}</span>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"skillOne\">Pet Skill 1:</label>\r\n                <input className=\"form-control\" type=\"text\" value={inputs.skillOne} onChange={handleInput} name=\"skillOne\"/>\r\n                <span className=\"text-danger\">{errors.skillOne ? errors.skillOne.message : \"\"}</span>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"skillTwo\">Pet Skill 2:</label>\r\n                <input className=\"form-control\" type=\"text\" value={inputs.skillTwo} onChange={handleInput} name=\"skillTwo\"/>\r\n                <span className=\"text-danger\">{errors.skillTwo? errors.skillTwo.message : \"\"}</span>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"skillThree\">Pet Skill 3:</label>\r\n                <input className=\"form-control\" type=\"text\" value={inputs.skillThree} onChange={handleInput} name=\"skillThree\"/>\r\n                <span className=\"text-danger\">{errors.skillThree? errors.skillThree.message : \"\"}</span>\r\n            </div>\r\n            <input type=\"submit\" value={submitValue} className=\"btn btn-info\"/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PetForm;","import React,{useState} from 'react';\r\nimport Axios from 'axios';\r\nimport PetForm from '../components/PetForm';\r\nimport { navigate } from '@reach/router';\r\n\r\nconst New = props => {\r\n    const initialPet = {\r\n        petName:\"\",\r\n        petType:\"\",\r\n        petDesc:\"\",\r\n        skillOne:\"\",\r\n        skillTwo:\"\",\r\n        skillThree:\"\"\r\n    }\r\n    const initialErrors = {\r\n        petName:\"\",\r\n        petType:\"\",\r\n        petDesc:\"\",\r\n        skillOne:\"\",\r\n        skillTwo:\"\",\r\n        skillThree:\"\"\r\n    }\r\n    const [pet,setPet] = useState(initialPet)\r\n    const [errors,setErrors] = useState(initialErrors);\r\n    const handleInput = e => {\r\n        setPet({\r\n            ...pet,\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        setErrors(initialErrors)\r\n        Axios.post(\"http://localhost:8000/api/create/pet\",pet)\r\n            .then(res => {\r\n                if (res.data.results){\r\n                    setPet(initialPet);\r\n                    navigate(\"/\")\r\n                }\r\n                else{\r\n                    console.log(res.data)\r\n                    setErrors(res.data)\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n    return(\r\n        <div>\r\n            <h2> Add A Pet</h2>\r\n            <PetForm \r\n                inputs = {pet}\r\n                errors={errors}\r\n                handleInput={handleInput}\r\n                handleSubmit={handleSubmit}\r\n                submitValue=\"Add Pet\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default New;","import { navigate } from '@reach/router';\r\nimport Axios from 'axios';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst Show = props => {\r\n    const [pet, setPet] = useState(null);\r\n\r\n    useEffect(() => {\r\n        Axios.get(`http://localhost:8000/api/pet/${props.id}`)\r\n            .then(res => setPet(res.data.results))\r\n            .catch(err => console.log(err));\r\n    }, [props])\r\n\r\n    const handleEuthanize = (id) => {\r\n        Axios.delete(`http://localhost:8000/api/destroy/pet/${id}`)\r\n            .then(res => navigate(\"/\"))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                pet ? <>\r\n                    <div className=\"card col-8 mx-auto\">\r\n                        <h2>Name: {pet.petName}</h2>\r\n                        <h2>Type: {pet.petType}</h2>\r\n                        <h5>Description: {pet.petDesc}</h5>\r\n                        <p>Skill 1: {pet.skillOne}</p>\r\n                        <p>Skill 2: {pet.skillTwo}</p>\r\n                        <p>Skill 3: {pet.skillThree}</p>\r\n                        <button onClick={() => handleEuthanize(pet._id)} className=\"btn btn-danger\">Euthanize</button>\r\n                    </div>\r\n                </> : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Show;","import React,{useState,useEffect} from 'react';\r\nimport Axios from 'axios';\r\nimport PetForm from '../components/PetForm';\r\nimport { navigate } from '@reach/router';\r\n\r\nconst Edit = props => {\r\n    const initialErrors = {\r\n        petName:\"\",\r\n        petType:\"\",\r\n        petDesc:\"\",\r\n        skillOne:\"\",\r\n        skillTwo:\"\",\r\n        skillThree:\"\"\r\n    }\r\n    const [edit,setEdit] = useState({\r\n        petName:\"\",\r\n        petType:\"\",\r\n        petDesc:\"\",\r\n        skillOne:\"\",\r\n        skillTwo:\"\",\r\n        skillThree:\"\"\r\n    });\r\n    const [errors,setErrors] = useState(initialErrors);\r\n\r\n    useEffect(() => {\r\n        Axios.get(`http://localhost:8000/api/pet/${props.id}`)\r\n            .then(res => setEdit(res.data.results))\r\n            .catch(err => console.log(err));\r\n    }, [props])\r\n\r\n    const handleInput = e => {\r\n        setEdit({\r\n            ...edit,\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        setErrors(initialErrors)\r\n        Axios.put(`http://localhost:8000/api/update/pet/${edit._id}`,edit)\r\n            .then(res => {\r\n                navigate(`/pet/${edit._id}`)\r\n            })\r\n            .catch(err => setErrors(err.response.data.errors));\r\n    }\r\n    return(\r\n        <div>\r\n            <h2>Edit {edit.petName}</h2>\r\n            <PetForm \r\n                inputs = {edit}\r\n                errors={errors}\r\n                handleInput={handleInput}\r\n                handleSubmit={handleSubmit}\r\n                submitValue=\"Edit Pet\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Edit;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Link, Router} from '@reach/router';\nimport Main from './views/Main';\nimport New from './views/New';\nimport Show from './views/Show';\nimport Edit from './views/Edit';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Pet Shelter</h1>\n      <div className=\"d-flex justify-content-between col-4 mx-auto\">\n        <Link to=\"/new\" className=\"btn btn-info btn-outline-dark\">Add pet</Link>\n        <Link to=\"/\" className=\"btn btn-info btn-outline-dark\">Home</Link>\n      </div>\n      <Router>\n        <Main path=\"/\" />\n        <New path=\"/new\" />\n        <Show path=\"/pet/:id\"/> \n        <Edit path=\"/edit/:id\"/> \n      </Router>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}